// Code generated by MockGen. DO NOT EDIT.
// Source: services/eta/eta.go
//
// Generated by this command:
//
//	mockgen -source services/eta/eta.go -destination=services/eta/eta_mock.go -mock_names Interface=MockETAClient -package=eta
//

// Package eta is a generated GoMock package.
package eta

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockETAClient is a mock of Interface interface.
type MockETAClient struct {
	ctrl     *gomock.Controller
	recorder *MockETAClientMockRecorder
	isgomock struct{}
}

// MockETAClientMockRecorder is the mock recorder for MockETAClient.
type MockETAClientMockRecorder struct {
	mock *MockETAClient
}

// NewMockETAClient creates a new mock instance.
func NewMockETAClient(ctrl *gomock.Controller) *MockETAClient {
	mock := &MockETAClient{ctrl: ctrl}
	mock.recorder = &MockETAClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockETAClient) EXPECT() *MockETAClientMockRecorder {
	return m.recorder
}

// GetETA mocks base method.
func (m *MockETAClient) GetETA(points []Point, options CallOptions) (ETA, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetETA", points, options)
	ret0, _ := ret[0].(ETA)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetETA indicates an expected call of GetETA.
func (mr *MockETAClientMockRecorder) GetETA(points, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetETA", reflect.TypeOf((*MockETAClient)(nil).GetETA), points, options)
}

// GetETAWithContext mocks base method.
func (m *MockETAClient) GetETAWithContext(ctx context.Context, points []Point, options CallOptions) (ETA, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetETAWithContext", ctx, points, options)
	ret0, _ := ret[0].(ETA)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetETAWithContext indicates an expected call of GetETAWithContext.
func (mr *MockETAClientMockRecorder) GetETAWithContext(ctx, points, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetETAWithContext", reflect.TypeOf((*MockETAClient)(nil).GetETAWithContext), ctx, points, options)
}
